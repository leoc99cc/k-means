import numpy as np


def forgy(X, row_count, n_clusters):
    return X[np.random.choice(row_count, size=n_clusters, replace=False)]


def macqueen(X, n_clusters):
    return X[:n_clusters]


def maximin(X, n_clusters):
    X_ = np.copy(X)
    initial_centers = np.zeros((n_clusters, X_.shape[1]))
    X_norms = np.linalg.norm(X_, axis=1)
    X_norms_max_i = X_norms.argmax()
    initial_centers[0] = X_[X_norms_max_i]
    X_ = np.delete(X_, X_norms_max_i, axis=0)
    for i in range(1, n_clusters):
        distances = np.zeros((X_.shape[0], i))
        for index, center in enumerate(initial_centers[:i]):
            distances[:, index] = np.linalg.norm(X_ - center, axis=1)

        max_min_index = distances.min(axis=1).argmax()

        initial_centers[i] = X_[max_min_index]
        X_ = np.delete(X_, max_min_index, axis=0)

    return initial_centers


def var_part(X, n_clusters):
    X_ = np.append(X, np.zeros(X.shape[0])[:, np.newaxis], axis=1)
    initial_centers = np.zeros((n_clusters, X.shape[1]))

    cluster_i = 1
    while cluster_i != n_clusters:
        within_clusters_sum_squares = np.zeros(cluster_i)
        for j in range(cluster_i):
            cluster_members = X_[X_[:, -1] == j]
            cluster_mean = cluster_members.mean(axis=0)
            within_clusters_sum_squares[j] = np.linalg.norm(cluster_members - cluster_mean, axis=1).sum()

        # Cluster which has greatest SSE
        max_sse_i = within_clusters_sum_squares.argmax()
        X_max_sse_i = X_[:, -1] == max_sse_i
        X_max_sse = X_[X_max_sse_i]

        variances, means = X_max_sse.var(axis=0), X_max_sse.mean(axis=0)
        max_variance_i = variances.argmax()
        max_variance_mean = means[max_variance_i]

        X_smaller_mean = X_max_sse[:, max_variance_i] <= max_variance_mean
        X_greater_mean = X_max_sse[:, max_variance_i] > max_variance_mean

        initial_centers[max_sse_i] = X_max_sse[X_smaller_mean].mean(axis=0)[:-1]
        initial_centers[cluster_i] = X_max_sse[X_greater_mean].mean(axis=0)[:-1]

        X_[(X_max_sse_i) & (X_[:, max_variance_i] <= max_variance_mean), -1] = cluster_i
        X_[(X_max_sse_i) & (X_[:, max_variance_i] > max_variance_mean), -1] = max_sse_i

        cluster_i += 1

    return initial_centers


def c1(X, n_clusters):
    initial_centers = np.array(
        [(30.4884, 31.4006, 28.7555, 30.9588, 27.8382, 25.7381, 27.2859, 27.9616, 30.7701, 35.707, 35.5891, 26.0781,
          35.7139, 34.49, 24.083, 29.0026, 28.017, 34.6295, 31.3418, 35.357, 35.7947, 30.2589, 26.0403, 27.1845,
          33.5789, 28.9501, 29.5101, 30.9526, 25.5467, 26.1449, 25.4909, 34.8381, 17.5912, 21.0037, 19.1206, 20.57,
          20.3776, 15.7679, 17.3033, 18.832, 21.8979, 13.8525, 16.361, 13.923, 22.9125, 18.3157, 21.1789, 15.1881,
          13.6289, 21.8553, 13.2929, 12.6212, 21.722, 14.6608, 13.07, 14.4327, 13.1643, 12.6858, 20.4566, 15.7367),
         (29.4606, 29.5876, 25.1454, 31.8475, 33.8892, 32.7152, 29.8153, 26.4699, 28.1925, 30.8979, 32.3175, 26.3318,
          35.0074, 26.0561, 27.9781, 24.1462, 25.8141, 32.2856, 26.4549, 33.6465, 29.8281, 33.461, 24.0026, 35.9236,
          31.7751, 32.7097, 25.0179, 30.6, 24.4238, 34.6916, 24.5042, 35.7991, 34.2586, 24.2387, 25.5273, 31.2585,
          28.9112, 34.9806, 27.3678, 25.4641, 30.1201, 34.5884, 34.3765, 24.5718, 27.9785, 33.117, 33.2657, 35.8516,
          32.2698, 32.7861, 24.9522, 27.8176, 25.1178, 33.1496, 34.6101, 27.9153, 30.4212, 34.8822, 29.6214, 27.2341),
         (27.0112, 25.9264, 27.6876, 29.5579, 24.5461, 25.7461, 33.5892, 35.8428, 30.105, 31.7403, 32.8812, 31.1013,
          26.3127, 32.5162, 27.6913, 26.8885, 26.969, 27.7838, 33.9384, 32.5874, 31.0536, 29.4719, 31.351, 32.3777,
          33.1537, 25.9264, 24.2515, 27.0002, 32.0399, 35.9067, 25.4641, 29.3871, 33.2462, 24.1322, 34.418, 29.5748,
          35.5054, 33.7306, 10.2381, 18.4345, 16.8686, 14.4413, 19.7054, 13.9584, 19.1803, 15.3105, 10.1617, 13.972,
          12.6012, 18.9622, 10.1662, 8.74318, 9.08396, 11.19, 15.4343, 13.4542, 10.2326, 8.17509, 16.7229, 16.1463),
         (26.8911, 43.6161, 46.4914, 41.6352, 42.2098, 34.4329, 20.8029, 13.0554, 14.9234, 15.4818, 30.7871, 38.131,
          39.0141, 41.8578, 40.0218, 35.1921, 23.0421, 22.3659, 11.7988, 18.6745, 24.8879, 34.3958, 38.6106, 45.1564,
          43.4375, 38.2177, 28.1738, 24.7151, 20.4831, 17.3737, 22.7272, 36.1049, 44.4373, 42.9198, 43.5772, 42.3916,
          35.5608, 27.7454, 15.8291, 21.8644, 18.4122, 29.6449, 39.5166, 44.5715, 38.6288, 40.5667, 35.2902, 22.6827,
          16.1952, 19.2354, 24.257, 22.5919, 34.7132, 44.7643, 39.4429, 40.6234, 36.0594, 24.6428, 23.8761, 16.2003),
         (26.3036, 30.6055, 34.5858, 28.7136, 32.4178, 32.1093, 27.2444, 33.4923, 26.6928, 32.4971, 25.2309, 27.255,
          30.4638, 28.8047, 28.7933, 29.1701, 28.7687, 28.5322, 25.3091, 29.4253, 31.6378, 29.7257, 26.4732, 29.5814,
          26.7328, 26.1864, 30.1146, 32.2801, 35.7944, 26.1416, 25.8438, 31.821, 24.0845, 30.6158, 16.8249, 18.5131,
          23.1804, 23.5017, 23.4892, 27.294, 26.828, 18.8773, 18.3357, 15.814, 21.1232, 25.9647, 21.4427, 22.7173,
          20.6708, 24.4815, 17.0453, 18.289, 26.7707, 27.3847, 17.9846, 19.4524, 20.857, 23.8421, 21.6965, 24.7628),
         (31.1949, 32.0851, 32.9315, 28.0141, 31.3973, 32.6458, 32.7516, 33.0957, 35.5491, 31.4028, 35.299, 27.8911,
          35.1286, 34.7254, 24.9045, 31.0491, 29.1917, 30.8589, 26.4486, 29.1554, 24.7054, 32.5368, 27.1669, 26.3139,
          33.7152, 32.8437, 26.3296, 34.9912, 30.1054, 34.1499, 34.1775, 26.561, 27.2826, 27.1467, 28.0181, 34.4419,
          25.9163, 22.6036, 26.7473, 22.1034, 23.4071, 19.1602, 21.2221, 15.9496, 20.1153, 15.1663, 23.4144, 24.476,
          16.0891, 26.7209, 26.5369, 21.7285, 17.5635, 15.3617, 18.7419, 21.8438, 16.2602, 17.8444, 16.4457, 22.7035)]
    )
    return initial_centers

def c2(X, n_clusters):
    initial_centers = np.array(
        [(34.4533, 34.0717, 31.214, 34.2102, 28.5297, 33.8077, 28.6978, 31.4028, 32.5999, 32.6076, 29.4664, 31.2221,
          33.8422, 29.6232, 27.6582, 34.3593, 26.7101, 33.8646, 25.1567, 26.6388, 25.1575, 35.0353, 24.3235, 32.4038,
          24.318, 29.7642, 35.0452, 28.6993, 30.827, 34.4136, 25.7726, 27.4739, 34.3229, 33.7056, 31.0165, 25.3437,
          27.2881, 24.9786, 32.1167, 20.0003, 18.1161, 23.2308, 16.4277, 20.5133, 23.3079, 17.3799, 23.3519, 24.1308,
          21.9418, 21.81, 18.9578, 17.0383, 12.5976, 18.956, 19.1447, 19.8167, 23.5054, 21.2195, 14.3048, 20.614),
         (24.3085, 25.0208, 28.8281, 36.8007, 35.288, 31.4105, 36.0205, 31.5055, 28.0319, 32.3991, 40.0655, 30.9085,
          40.8476, 39.5119, 42.1863, 38.2533, 37.2412, 31.9399, 32.4066, 41.9704, 38.0374, 43.0109, 38.4823, 38.8465,
          35.3263, 46.8235, 40.3321, 39.5425, 43.5947, 47.0212, 48.1591, 40.2924, 47.7524, 41.6874, 46.8247, 46.8959,
          46.9777, 49.7472, 44.4974, 50.599, 50.3566, 53.3457, 48.4711, 54.0131, 54.7846, 53.6267, 49.7506, 46.6692,
          53.6246, 58.2838, 55.884, 52.4166, 58.4628, 53.9063, 61.1162, 52.0021, 50.0944, 58.2543, 53.5134, 59.4715),
         (24.2104, 41.7679, 45.2228, 43.7762, 48.8175, 42.4056, 33.754, 27.3527, 21.9765, 22.2249, 14.6318, 13.2447,
          25.9956, 22.9981, 36.5781, 39.1692, 48.3092, 44.9226, 44.9275, 33.9707, 33.7175, 25.0466, 19.1417, 16.1412,
          10.5987, 24.3277, 18.0507, 26.8056, 39.6169, 45.4319, 42.7228, 40.7078, 34.2781, 36.3512, 30.5172, 21.4045,
          15.7467, 13.948, 14.5696, 21.9495, 22.5105, 32.4536, 43.0862, 41.8163, 38.1183, 46.5417, 35.1324, 27.1443,
          19.4728, 22.2505, 14.7018, 16.1907, 21.4407, 21.923, 30.5317, 41.065, 44.3438, 45.9355, 40.3084, 45.0065),
         (24.0037, 35.8809, 38.8854, 39.6478, 39.082, 40.1985, 29.1954, 17.0442, 20.4087, 9.3816, 15.597, 17.1616,
          29.4168, 41.178, 46.7701, 48.7631, 43.1989, 41.326, 32.5536, 21.2629, 18.8219, 15.6749, 11.9467, 28.1057,
          30.9185, 40.1609, 43.7781, 46.2128, 37.7389, 37.9744, 22.7584, 17.1595, 14.568, 12.7434, 16.1829, 25.8339,
          32.3265, 40.2639, 41.1807, 47.8568, 36.6706, 38.2492, 24.0261, 21.1555, 22.0908, 12.807, 23.5331, 19.2486,
          29.1826, 42.2556, 44.3969, 44.3432, 41.3229, 40.1345, 30.4834, 20.4561, 20.6186, 21.0214, 15.5366, 30.5863),
         (32.07, 35.927, 46.0664, 47.0233, 38.0722, 37.3594, 26.1317, 13.0016, 11.8143, 13.1851, 20.6026, 32.5702,
          46.5346, 46.8849, 48.0136, 41.0053, 24.4386, 22.9657, 21.3305, 22.1853, 18.0982, 23.2729, 39.1643, 38.3771,
          49.8789, 46.526, 38.8149, 24.2987, 15.3701, 15.621, 22.1259, 28.6364, 29.853, 37.2934, 42.2965, 47.0608,
          37.8995, 31.8064, 21.0852, 11.6247, 18.9693, 19.9275, 30.0616, 31.4037, 41.5582, 46.1573, 42.0035, 36.9515,
          23.261, 15.7532, 10.0067, 18.6147, 27.6506, 28.8793, 40.8209, 46.9311, 38.1265, 38.3925, 29.3815, 18.3166),
         (34.9901, 23.512, 31.3224, 33.7057, 25.8395, 24.7419, 25.0078, 22.7542, 28.167, 19.8701, 20.0614, 22.7921,
          23.3165, 22.7092, 23.2982, 19.0198, 20.6995, 19.7425, 25.0988, 16.3289, 23.3913, 14.6772, 17.6601, 22.1534,
          14.8987, 21.5083, 11.2952, 11.1076, 12.6077, 13.9852, 13.0587, 14.6756, 10.7908, 13.8549, 10.1934, 15.9551,
          15.1098, 12.9281, 6.89805, 9.30997, 15.5663, 7.59694, 12.521, 13.2364, 3.56604, 9.31379, 5.61408, 11.2366,
          12.415, 8.83944, 0.575556, 6.09379, 10.1494, -1.57518, 0.656809, 5.91872, -2.95034, 5.67347, 0.163732,
          7.02452)]
    )
    return initial_centers